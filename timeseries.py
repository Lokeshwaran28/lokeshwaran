# -*- coding: utf-8 -*-
"""lokeshwarantimeseries.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AZw3Kr9RBCiOh_9c-Vd6vScQuzpXhvXo
"""

import datetime
res=datetime.datetime.now()
print("today-now function:",res)
today=datetime.datetime.today()
print("\n today:",today)

tomorrow=today+datetime.timedelta(days=2)
print("\n tomorrow:",tomorrow)

yesterday=today-datetime.timedelta(days=2)
print("\n yesterday:",yesterday)
res=datetime.datetime.now()
res1=datetime.datetime(2020,6,8,23,10,25,404040)
print("\n date format[2020,6,23,10,25,404040]:",res1)

from datetime import date
d=date(2002,12,31)
print("\n Replacing date:",d,d.replace(day=26))
t=date(2022,10,13)
d=date(2022,10,13).ctime()
print("\n Day and Month:",t,d)

today=date.today()
print("\n Today:",today)
print("Current year:",today.year)
print("Current month:",today.month)
print("Current day:",today.day)

import datetime
cd=datetime.datetime.now()
print(cd)

res=cd.strftime("%y")
print("\n Two-digit year:",res)

# Short version of month
res=cd.strftime("%b")
print("\nShort version of month:",res)
# Full name of month
res=cd.strftime("%B")
print("\nFull name of month:", res)

#Days of the year
res=cd.strftime("%j")
print("\nDays of the year:", res)

# Shortcut for %m/%d/%y (e.g., 04/18/12)
res=cd.strftime("%D")
print("\nShortcut for %m/%d/%y (e.g., 04/18/12):",res)

# Two-digit day [01, 31]
res=cd.strftime("%d")
print("\nTwo-digit day [01, 31]:",res)

# Short version of day
res=cd.strftime("%a")
print("\nShort version of day:",res)
# Full name of a day
res=cd.strftime("%A")
print("\nFull name of a day:",res)

#Hour (24-hour clock) [00, 23]
res=cd.strftime("%H")
print("\nHour (24-hour clock) [00, 23]:",res)
# Hour (12-hour clock) [01, 12]
res=cd.strftime("%l")
print("\nHour (12-hour clock) [01, 12]:",res)

# Two-digit minute [00, 59]
res=cd.strftime("%M")
print("\nTwo-digit minute [00, 59]:", res)
# Second [00, 61] (seconds 60, 61 account for leap seconds)
res=cd.strftime("%S")
print("\nSecond [00, 61] (seconds 60, 61 account for leap seconds):",res)

res=cd.strftime("%F")
print("\nShortcut for %Y-%m-%d (e.g., 2012-4-18):",res)

res=cd.strftime("%f")
print("\nMicrosecond as an integer, zero-padded (from 000000 to 999999):",res)

res=cd.strftime("%p")
print("\nLocale equivalent of AM or PM:",res)

res=cd.strftime("%x")
print("\nLocale-appropriate formatted date (e.g., in the United States, May 1, 2012 yields '05/01/2012'):",res)

res=cd.strftime("%X")
print("\nLocale-appropriate time (e.g., '04:24:12 PM'):",res)



longer_ts=pd.Series(np.random.randn(1000),
                    index=pd.date_range("2000-01-01",periods=1000))
print("\n Daterange up to 1000 days:\n",longer_ts)

print("\n Daterange-2001 year:\n",longer_ts["2001"])
 print("\n Daterange-05 month 2001 year:\n",longer_ts["2001-05"])
 print("\n Daterange -first few dates in 2000 year\n",longer_ts["2000"].head())
 print("\n Datarange-first 15 date in 02 month 2001 year:\n ",longer_ts["2000-02"].head(15))
 print("\n Datarange-ran 26-09-2001:\n",longer_ts[datetime(2000,9,26)])
 print("\n Daterange from 26-9-2001 to 25-09-2002:\n",longer_ts[datetime(2001,9,26):datetime(2002,9,25)])

import pandas as pd
import numpy as np
from datetime import datetime
ran=pd.date_range("2020-8-15","2020-09-01")
print("Daterange:\n",ran)
ran=pd.date_range("2020-07-15",periods=10)
print("\n Daterange with periods and default day frequency:\n",ran)
ran=pd.date_range("2020-07-15",periods=10,freq="H")
print("\n Date range with periods and hour frequency:\n ",ran)
ran=pd.period_range("2020-10",periods=10,freq="M")
print("|n Date range with periods and month frequency:\n",ran)
ran=pd.timedelta_range(0,periods=8,freq="H")
print("\n Zero day with hour frequency periods:\n",ran)

import pandas as pd
import numpy as np
from datetime import datetime
dates=[datetime(2020,1,5),
datetime(2020,1,10),
datetime(2020,1,15),
datetime(2020,1,20),
datetime(2020,1,20)]
ts=pd.Series(np.random.randn(5),index=dates)
print("\n with this date object, create a series with datetime index:\n",ts)
res=ts.truncate(after="1/15/2020")
print("\n Truncate method to truncate datetime Series\n",res)

import pandas as pd
import numpy as np
from datetime import datetime
#Let's create a date variable that contains the dates.
dates = [datetime(2020,1,5),
datetime(2020,1,10),
datetime(2020,1,15),
datetime(2020,1,20),
datetime(2020,1,25)]
#With this date object, create a series with datetime index.
ts = pd.Series(np.random.randn(5), index=dates)
print("\nWith this date object, create a series with datetime index:\n",ts)
#Truncate method to see the values between two dates
res=ts.truncate(after="1/15/2020")
print("\nTruncate method to truncate datetime series:\n",res)
#let's create a variable named date with the date_range method.
da=pd.date_range("10/1/2022", periods=10, freq="W-SUN")
print("\nDate range with day periods:\n",da)
#Let's create a data frame that indexes this date variable.
long_df=pd.DataFrame(np.random.randn(10,4), index=da, columns=list("ABCD"))
print("\nMulti-column DateFrame with datetime index:\n",long_df)
#In some cases, the dates can be repeated.
date=pd.DatetimeIndex(["1/1/2020","1/2/2020","1/2/2020","1/2/2020","1/3/2020"])
ts1=pd.Series(np.arange(5),index=date)
print("\nDuplicate datetime index:\n",ts1)
#Let's find out repeated dates with the count method.
group=ts1.groupby(level=0)
print("\nRepeated date counts:\n",group.count())

long_df=pd.DataFrame(np.random.randn(10,4),index=da,columns=list("ABCD"))
print("\n Multi-column dateframe with datetime index:\n",long_df)